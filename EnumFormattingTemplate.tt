<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
// This file was automatically generated by CppWinRT.Builders
#include <winrt/<#= _type.GetNamespace() #>.h>
#include <winrt/formatters/helpers.h>

namespace winrt::formatters::impl
{
  template<>
  struct traits<<#= Helpers.GetCppTypeName(_type) #>>
	{
		using value_type = <#= Helpers.GetCppTypeName(_type) #>;
		static constexpr std::wstring_view name{ L"<#= _type.GetFullName() #>" };

    using tuple_t = std::pair<std::wstring_view, <#= Helpers.GetCppTypeName(_type) #>>;
    inline static constexpr std::array values
		{
<# foreach (var value in _type.GetFields()) { #>
      tuple_t { L"<#= value.GetName() #>", <#= Helpers.GetCppTypeName(_type) #>::<#= value.GetName() #> },
<# } #>
    };
	};
}

template<>
constexpr std::wstring_view std::formatter<<#= Helpers.GetCppTypeName(_type) #>, wchar_t>::to_string(const <#= Helpers.GetCppTypeName(_type) #>& value)
{
    using traits_t = winrt::formatters::impl::traits<winrt::RuntimeComponent1::MyEnum>;
    const auto entry = std::find_if(traits_t::values.begin(), traits_t::values.end(), [&value](const traits_t::tuple_t& entry) { return entry.second == value; });
    if (entry != traits_t::values.end())
    {
      return entry->first;
    }
    return L"Unknown";
}

template<>
constexpr <#= Helpers.GetCppTypeName(_type) #> std::formatter<<#= Helpers.GetCppTypeName(_type) #>, wchar_t>::from_string(std::wstring_view value, <#= Helpers.GetCppTypeName(_type) #>&& default_value)
{
    using traits_t = winrt::formatters::impl::traits<winrt::RuntimeComponent1::MyEnum>;
		const auto entry = std::find_if(traits_t::values.begin(), traits_t::values.end(), [&value](const traits_t::tuple_t& entry) { return entry.first == value; });
		if (entry != traits_t::values.end())
		{
			return entry->second;
		}
		return default_value;
}
