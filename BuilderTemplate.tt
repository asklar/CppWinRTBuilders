<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".h" #>
// This file was automatically generated by CppWinRT.Builders
#include <winrt/<#= _type.GetNamespace() #>.h>

namespace winrt::<#= _type.GetNamespace().Replace(".", "::") #>::builders {
struct <#= _type.GetName() #> : <#= Helpers.GetCppTypeName(_type) #> {
  using super = <#= Helpers.GetCppTypeName(_type) #>;
<#
var setters = Helpers.GetAllSetters(_type);
foreach (var setter in setters) {
#>
  // setter: <#= setter.GetName() #> (from <#= setter.DeclaringType.GetFullName() #>)
  const <#= _type.GetName() #>& <#= setter.GetName() #>(<#= Helpers.GetCppTypeName(setter.GetPropertyType()) #> const& value) const {
    super::<#= setter.GetName() #>(value);
    return *this;
  }
<#
}
#>
<#
var collectionSetters = Helpers.GetAllCollectionSetters(_type);
foreach (var csetter in collectionSetters) {
#>
  using super::<#= csetter.GetName() #>;
  // collection setter: <#= csetter.GetName() #> (from <#= csetter.DeclaringType.GetFullName() #>), of type <#= csetter.GetPropertyType().GetPrettyFullName() #>
  const <#= _type.GetName() #>& <#= csetter.GetName() #>(std::initializer_list<<#= Helpers.GetCppCollectionElementType(csetter.GetPropertyType()) #>> const& value) const {
    <# if (Helpers.GetInterfaceFromType(csetter.GetPropertyType(), Helpers.IVector) != null) { #>
    super::<#= csetter.GetName() #>().ReplaceAll({ value.begin(), value.end() });
    <# } else { #>
    for (const auto& v : value) {
      super::<#= csetter.GetName() #>().Insert(v.first, v.second);
    }
    <# } #>
    return *this;
  }
<# }

var events = Helpers.GetAllEvents(_type);
foreach (var evt in events) {
#>
  // event adder: <#= evt.GetName() #> (from <#= evt.DeclaringType.GetFullName() #>), of type <#= evt.GetEventType().GetPrettyFullName() #>
  const <#= _type.GetName() #>& Add_<#= evt.GetName() #>(<#= Helpers.GetCppEventHandlerType(evt) #> const& handler) const {
    super::<#= evt.GetName() #>(winrt::auto_revoke, handler);
    return *this;
  }
<# } #>
};
}