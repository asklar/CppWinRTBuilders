<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>


struct <#= _scheme.CppType #> {
  static constexpr std::wstring_view scheme_type = L"<#= _scheme.Type #>";

<# if (_scheme is ApiKeySecurityScheme apiKeyScheme) { #>
    <#= apiKeyScheme.CppType #>(std::wstring_view key) : _key(key) {}
    <#= apiKeyScheme.CppType #>() = default;
    std::wstring _key;
    

  void apply(const winrt::Windows::Web::Http::HttpRequestMessage& request, const winrt::Windows::Web::Http::HttpClient& /*client*/) const
  {
        if (_key.empty())
        {
            return;
        }
<# if (apiKeyScheme.In == "header") { #>
        request.Headers().Append(L"<#= apiKeyScheme.Name #>", _key);
<# } else if (apiKeyScheme.In == "query") { #>
        auto uri = request.RequestUri();
        auto query = uri.Query();
        if (query.empty()) {
            query = L"?<#= apiKeyScheme.Name #>=<#= apiKeyScheme.Name #>";
        } else {
            query += L"&<#= apiKeyScheme.Name #>=<#= apiKeyScheme.Name #>";
        }
        uri.Query(query);
        request.RequestUri(uri);
<# } #>
  }
<# } else if (_scheme is HttpSecurityScheme httpScheme) { #>
    <#= httpScheme.CppType #> (std::wstring_view username, std::wstring_view password) : _username(username), _password(password) {}
    std::wstring _username;
    std::wstring _password;

    void apply(const winrt::Windows::Web::Http::HttpRequestMessage& request, const winrt::Windows::Web::Http::HttpClient& client) const
    {
        auto credentials = winrt::Windows::Security::Credentials::PasswordCredential(L"<#= httpScheme.Resource #>", _username, _password);
        client.DefaultRequestHeaders().Authorization(winrt::Windows::Web::Http::Headers::HttpCredentialsHeaderValue(credentials));
    }
<# } else if (_scheme is OAuth2SecurityScheme oauth2Scheme) { #>
    <#= oauth2Scheme.CppType #> (std::wstring_view token) : _token(token) {}
    std::wstring _token;

    void apply(const winrt::Windows::Web::Http::HttpRequestMessage& request, const winrt::Windows::Web::Http::HttpClient& /*client*/) const
    {
        request.Headers().Append(L"Authorization", L"Bearer " + _token);
    }
<# } #>

};