// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 17.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace CppWinRT.OpenApi
{
    using System.Linq;
    using System.Text;
    using System.Collections.Generic;
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    
    #line 1 "C:\Users\asklar\source\repos\CppWinRTBuilderCodeGen\CppWinRT.OpenApi\CppWinRTGenerator.tt"
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "17.0.0.0")]
    public partial class CppWinRTGenerator : CppWinRTGeneratorBase
    {
#line hidden
        /// <summary>
        /// Create the template output
        /// </summary>
        public virtual string TransformText()
        {
            this.Write("// This file was automatically generated by CppWinRT.OpenApi\r\n// from the OpenAPI" +
                    " specification at ");
            
            #line 7 "C:\Users\asklar\source\repos\CppWinRTBuilderCodeGen\CppWinRT.OpenApi\CppWinRTGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(SpecificationUrl));
            
            #line default
            #line hidden
            this.Write("\r\n// (");
            
            #line 8 "C:\Users\asklar\source\repos\CppWinRTBuilderCodeGen\CppWinRT.OpenApi\CppWinRTGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(OpenApiPath));
            
            #line default
            #line hidden
            this.Write(")\r\n// Do not edit this file directly, as it will be overwritten.\r\n// Using server" +
                    ": ");
            
            #line 10 "C:\Users\asklar\source\repos\CppWinRTBuilderCodeGen\CppWinRT.OpenApi\CppWinRTGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ServerDescription));
            
            #line default
            #line hidden
            this.Write(" -> ");
            
            #line 10 "C:\Users\asklar\source\repos\CppWinRTBuilderCodeGen\CppWinRT.OpenApi\CppWinRTGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ServerUri));
            
            #line default
            #line hidden
            this.Write(@"

#include <winrt/Windows.Data.Json.h>
#include <winrt/Windows.Foundation.h>
#include <winrt/Windows.Foundation.Collections.h>
#include <winrt/Windows.System.h>
#include <winrt/Windows.Web.Http.h>
#include <winrt/Windows.Web.Http.Headers.h>
#include <wil/coroutine.h>
#include <format>
#include <array>
#include <numeric>
// ");
            
            #line 22 "C:\Users\asklar\source\repos\CppWinRTBuilderCodeGen\CppWinRT.OpenApi\CppWinRTGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Title));
            
            #line default
            #line hidden
            this.Write("\r\n// Version ");
            
            #line 23 "C:\Users\asklar\source\repos\CppWinRTBuilderCodeGen\CppWinRT.OpenApi\CppWinRTGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Version));
            
            #line default
            #line hidden
            this.Write("\r\n\r\nnamespace ");
            
            #line 25 "C:\Users\asklar\source\repos\CppWinRTBuilderCodeGen\CppWinRT.OpenApi\CppWinRTGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Namespace));
            
            #line default
            #line hidden
            this.Write("::");
            
            #line 25 "C:\Users\asklar\source\repos\CppWinRTBuilderCodeGen\CppWinRT.OpenApi\CppWinRTGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ApiName));
            
            #line default
            #line hidden
            this.Write("\r\n{\r\nenum class ServerEnvironment\r\n{\r\n    Default = 0,\r\n");
            
            #line 30 "C:\Users\asklar\source\repos\CppWinRTBuilderCodeGen\CppWinRT.OpenApi\CppWinRTGenerator.tt"
 foreach (var server in Servers) { 
            
            #line default
            #line hidden
            this.Write("    ");
            
            #line 31 "C:\Users\asklar\source\repos\CppWinRTBuilderCodeGen\CppWinRT.OpenApi\CppWinRTGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(server.Key.Replace(" ", "_")));
            
            #line default
            #line hidden
            this.Write(",\r\n");
            
            #line 32 "C:\Users\asklar\source\repos\CppWinRTBuilderCodeGen\CppWinRT.OpenApi\CppWinRTGenerator.tt"
 } 
            
            #line default
            #line hidden
            this.Write("};\r\n\r\nstruct ServerConfig\r\n{\r\n    ServerEnvironment environment;\r\n    std::wstrin" +
                    "g_view uri;\r\n};\r\n\r\nconstexpr std::array ServerConfigList =\r\n{\r\n    ServerConfig{" +
                    "ServerEnvironment::Default, L\"");
            
            #line 43 "C:\Users\asklar\source\repos\CppWinRTBuilderCodeGen\CppWinRT.OpenApi\CppWinRTGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ServerUri));
            
            #line default
            #line hidden
            this.Write("\"},\r\n");
            
            #line 44 "C:\Users\asklar\source\repos\CppWinRTBuilderCodeGen\CppWinRT.OpenApi\CppWinRTGenerator.tt"
 foreach (var server in Servers) { 
            
            #line default
            #line hidden
            this.Write("    ServerConfig{ServerEnvironment::");
            
            #line 45 "C:\Users\asklar\source\repos\CppWinRTBuilderCodeGen\CppWinRT.OpenApi\CppWinRTGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(server.Key.Replace(" ", "_")));
            
            #line default
            #line hidden
            this.Write(", L\"");
            
            #line 45 "C:\Users\asklar\source\repos\CppWinRTBuilderCodeGen\CppWinRT.OpenApi\CppWinRTGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(server.Value));
            
            #line default
            #line hidden
            this.Write("\"},\r\n");
            
            #line 46 "C:\Users\asklar\source\repos\CppWinRTBuilderCodeGen\CppWinRT.OpenApi\CppWinRTGenerator.tt"
 } 
            
            #line default
            #line hidden
            this.Write(@"};

namespace details
{
template<typename T>
struct HasSendRequestAsync
{
  template<typename U, typename = decltype(std::declval<U>().SendRequestAsync(std::declval<winrt::Windows::Web::Http::HttpRequestMessage>()))>
  static std::true_type test(int);

  template<typename>
  static std::false_type test(...);

  static constexpr bool value = decltype(test<T>(0))::value;
};

template<typename T>
struct HasClose
{
  template<typename U, typename = decltype(std::declval<U>().Close())>
  static std::true_type test(int);

  template<typename>
  static std::false_type test(...);

  static constexpr bool value = decltype(test<T>(0))::value;
};

template<typename T>
constexpr bool IsHttpClientIsh_v = HasSendRequestAsync<T>::value && HasClose<T>::value;

}

");
            
            #line 80 "C:\Users\asklar\source\repos\CppWinRTBuilderCodeGen\CppWinRT.OpenApi\CppWinRTGenerator.tt"
 foreach (var security in Security) { 
            
            #line default
            #line hidden
            
            #line 81 "C:\Users\asklar\source\repos\CppWinRTBuilderCodeGen\CppWinRT.OpenApi\CppWinRTGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(security.Value.GetCppDefinition()));
            
            #line default
            #line hidden
            this.Write("\r\n");
            
            #line 82 "C:\Users\asklar\source\repos\CppWinRTBuilderCodeGen\CppWinRT.OpenApi\CppWinRTGenerator.tt"
 } 
            
            #line default
            #line hidden
            this.Write("\r\n");
            
            #line 84 "C:\Users\asklar\source\repos\CppWinRTBuilderCodeGen\CppWinRT.OpenApi\CppWinRTGenerator.tt"
 foreach (var newType in GetGraphOrderedCustomTypes().Where(x => x.Key != "null")) { 
            
            #line default
            #line hidden
            this.Write("\r\nstruct ");
            
            #line 86 "C:\Users\asklar\source\repos\CppWinRTBuilderCodeGen\CppWinRT.OpenApi\CppWinRTGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(newType.Value.CppWinRTName.ToCamelCase()));
            
            #line default
            #line hidden
            this.Write("\r\n{\r\n");
            
            #line 88 "C:\Users\asklar\source\repos\CppWinRTBuilderCodeGen\CppWinRT.OpenApi\CppWinRTGenerator.tt"
 foreach (var property in newType.Value.Members) { 
            
            #line default
            #line hidden
            this.Write("    ");
            
            #line 89 "C:\Users\asklar\source\repos\CppWinRTBuilderCodeGen\CppWinRT.OpenApi\CppWinRTGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(LookupType(property.Schema.JsonName).CppWinRTFullName));
            
            #line default
            #line hidden
            this.Write(" ");
            
            #line 89 "C:\Users\asklar\source\repos\CppWinRTBuilderCodeGen\CppWinRT.OpenApi\CppWinRTGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(property.Name));
            
            #line default
            #line hidden
            this.Write("{};\r\n");
            
            #line 90 "C:\Users\asklar\source\repos\CppWinRTBuilderCodeGen\CppWinRT.OpenApi\CppWinRTGenerator.tt"
 } 
            
            #line default
            #line hidden
            this.Write("    ");
            
            #line 91 "C:\Users\asklar\source\repos\CppWinRTBuilderCodeGen\CppWinRT.OpenApi\CppWinRTGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(newType.Value.CppWinRTName.ToCamelCase()));
            
            #line default
            #line hidden
            this.Write("() = default;\r\n\r\n");
            
            #line 93 "C:\Users\asklar\source\repos\CppWinRTBuilderCodeGen\CppWinRT.OpenApi\CppWinRTGenerator.tt"
 if (!newType.Value.IsArray) { 
            
            #line default
            #line hidden
            this.Write("    ");
            
            #line 94 "C:\Users\asklar\source\repos\CppWinRTBuilderCodeGen\CppWinRT.OpenApi\CppWinRTGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(newType.Value.CppWinRTName.ToCamelCase()));
            
            #line default
            #line hidden
            this.Write("(const winrt::Windows::Data::Json::JsonObject& json)\r\n    {\r\n");
            
            #line 96 "C:\Users\asklar\source\repos\CppWinRTBuilderCodeGen\CppWinRT.OpenApi\CppWinRTGenerator.tt"
 foreach (var property in newType.Value.Members) {
     if (!property.Required) { 
            
            #line default
            #line hidden
            this.Write("        if (json.HasKey(L\"");
            
            #line 98 "C:\Users\asklar\source\repos\CppWinRTBuilderCodeGen\CppWinRT.OpenApi\CppWinRTGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(property.Name));
            
            #line default
            #line hidden
            this.Write("\"))\r\n");
            
            #line 99 "C:\Users\asklar\source\repos\CppWinRTBuilderCodeGen\CppWinRT.OpenApi\CppWinRTGenerator.tt"
   } 
            
            #line default
            #line hidden
            this.Write("        {\r\n            ");
            
            #line 101 "C:\Users\asklar\source\repos\CppWinRTBuilderCodeGen\CppWinRT.OpenApi\CppWinRTGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(property.Name));
            
            #line default
            #line hidden
            this.Write(" = ");
            
            #line 101 "C:\Users\asklar\source\repos\CppWinRTBuilderCodeGen\CppWinRT.OpenApi\CppWinRTGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetCppCast(property.Schema.JsonName)));
            
            #line default
            #line hidden
            this.Write("(json.");
            
            #line 101 "C:\Users\asklar\source\repos\CppWinRTBuilderCodeGen\CppWinRT.OpenApi\CppWinRTGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(JsonObjectMethod(property)));
            
            #line default
            #line hidden
            this.Write("(L\"");
            
            #line 101 "C:\Users\asklar\source\repos\CppWinRTBuilderCodeGen\CppWinRT.OpenApi\CppWinRTGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(property.Name));
            
            #line default
            #line hidden
            this.Write("\"));\r\n        }\r\n");
            
            #line 103 "C:\Users\asklar\source\repos\CppWinRTBuilderCodeGen\CppWinRT.OpenApi\CppWinRTGenerator.tt"
 } 
            
            #line default
            #line hidden
            this.Write("    }\r\n");
            
            #line 105 "C:\Users\asklar\source\repos\CppWinRTBuilderCodeGen\CppWinRT.OpenApi\CppWinRTGenerator.tt"
 } else { 
    var elementType = GetArrayElementType(newType.Value);
    var elementTypeCppWinRT = elementType.CppWinRTFullName;
    var getFromJsonMethodName = GetFromJsonMethodName(elementType);

            
            #line default
            #line hidden
            this.Write("    std::vector<");
            
            #line 110 "C:\Users\asklar\source\repos\CppWinRTBuilderCodeGen\CppWinRT.OpenApi\CppWinRTGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(elementTypeCppWinRT));
            
            #line default
            #line hidden
            this.Write(@"> items;
    auto& operator[](size_t index) { return items[index]; }
    const auto& operator[](size_t index) const { return items[index]; }
    auto empty() const { return items.empty(); }
    auto size() const { return items.size(); }
    void clear() { items.clear(); }

    ");
            
            #line 117 "C:\Users\asklar\source\repos\CppWinRTBuilderCodeGen\CppWinRT.OpenApi\CppWinRTGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(newType.Value.CppWinRTName.ToCamelCase()));
            
            #line default
            #line hidden
            this.Write("(const winrt::Windows::Data::Json::JsonArray& json)\r\n    {\r\n        for (const au" +
                    "to& e : json)\r\n        {\r\n            items.emplace_back(std::move(");
            
            #line 121 "C:\Users\asklar\source\repos\CppWinRTBuilderCodeGen\CppWinRT.OpenApi\CppWinRTGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(elementTypeCppWinRT));
            
            #line default
            #line hidden
            this.Write("{e.");
            
            #line 121 "C:\Users\asklar\source\repos\CppWinRTBuilderCodeGen\CppWinRT.OpenApi\CppWinRTGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(getFromJsonMethodName));
            
            #line default
            #line hidden
            this.Write("()}));\r\n        }\r\n");
            
            #line 123 "C:\Users\asklar\source\repos\CppWinRTBuilderCodeGen\CppWinRT.OpenApi\CppWinRTGenerator.tt"
 foreach (var property in newType.Value.Members) { 
            
            #line default
            #line hidden
            this.Write("    ");
            
            #line 124 "C:\Users\asklar\source\repos\CppWinRTBuilderCodeGen\CppWinRT.OpenApi\CppWinRTGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(property.Name));
            
            #line default
            #line hidden
            this.Write(" = json.");
            
            #line 124 "C:\Users\asklar\source\repos\CppWinRTBuilderCodeGen\CppWinRT.OpenApi\CppWinRTGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(JsonObjectMethod(property)));
            
            #line default
            #line hidden
            this.Write("(L\"");
            
            #line 124 "C:\Users\asklar\source\repos\CppWinRTBuilderCodeGen\CppWinRT.OpenApi\CppWinRTGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(property.Name));
            
            #line default
            #line hidden
            this.Write("\");\r\n");
            
            #line 125 "C:\Users\asklar\source\repos\CppWinRTBuilderCodeGen\CppWinRT.OpenApi\CppWinRTGenerator.tt"
 } 
            
            #line default
            #line hidden
            this.Write("    }\r\n");
            
            #line 127 "C:\Users\asklar\source\repos\CppWinRTBuilderCodeGen\CppWinRT.OpenApi\CppWinRTGenerator.tt"
 } 
            
            #line default
            #line hidden
            this.Write("\r\n    winrt::Windows::Data::Json::IJsonValue ToJsonValue() const\r\n    {\r\n");
            
            #line 131 "C:\Users\asklar\source\repos\CppWinRTBuilderCodeGen\CppWinRT.OpenApi\CppWinRTGenerator.tt"
 if (!newType.Value.IsArray) { 
            
            #line default
            #line hidden
            this.Write("        auto json = winrt::Windows::Data::Json::JsonObject();\r\n");
            
            #line 133 "C:\Users\asklar\source\repos\CppWinRTBuilderCodeGen\CppWinRT.OpenApi\CppWinRTGenerator.tt"
 foreach (var property in newType.Value.Members) { 
            
            #line default
            #line hidden
            this.Write("        json.Insert(L\"");
            
            #line 134 "C:\Users\asklar\source\repos\CppWinRTBuilderCodeGen\CppWinRT.OpenApi\CppWinRTGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(property.Name));
            
            #line default
            #line hidden
            this.Write("\", ");
            
            #line 134 "C:\Users\asklar\source\repos\CppWinRTBuilderCodeGen\CppWinRT.OpenApi\CppWinRTGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(CreateValueMethodName(property.Schema)));
            
            #line default
            #line hidden
            this.Write("(");
            
            #line 134 "C:\Users\asklar\source\repos\CppWinRTBuilderCodeGen\CppWinRT.OpenApi\CppWinRTGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(property.Name));
            
            #line default
            #line hidden
            this.Write("));\r\n");
            
            #line 135 "C:\Users\asklar\source\repos\CppWinRTBuilderCodeGen\CppWinRT.OpenApi\CppWinRTGenerator.tt"
 } 
            
            #line default
            #line hidden
            
            #line 136 "C:\Users\asklar\source\repos\CppWinRTBuilderCodeGen\CppWinRT.OpenApi\CppWinRTGenerator.tt"
 } else {
    var elementType = GetArrayElementType(newType.Value);
    var createValueMethodName = CreateValueMethodName(elementType);

            
            #line default
            #line hidden
            this.Write("        auto json = winrt::Windows::Data::Json::JsonArray();\r\n        for (const " +
                    "auto& e : items)\r\n        {\r\n            json.Append(");
            
            #line 143 "C:\Users\asklar\source\repos\CppWinRTBuilderCodeGen\CppWinRT.OpenApi\CppWinRTGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(createValueMethodName));
            
            #line default
            #line hidden
            this.Write("(e));\r\n        }\r\n");
            
            #line 145 "C:\Users\asklar\source\repos\CppWinRTBuilderCodeGen\CppWinRT.OpenApi\CppWinRTGenerator.tt"
 } 
            
            #line default
            #line hidden
            this.Write("        return json;\r\n    }\r\n\r\n    static auto ToJsonValue(const ");
            
            #line 149 "C:\Users\asklar\source\repos\CppWinRTBuilderCodeGen\CppWinRT.OpenApi\CppWinRTGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(newType.Value.CppWinRTName.ToCamelCase()));
            
            #line default
            #line hidden
            this.Write("& value)\r\n    {\r\n        return value.ToJsonValue();\r\n    }\r\n};\r\n\r\n");
            
            #line 155 "C:\Users\asklar\source\repos\CppWinRTBuilderCodeGen\CppWinRT.OpenApi\CppWinRTGenerator.tt"
 } 
            
            #line default
            #line hidden
            this.Write(@"

// APIs

template<typename THttpClient = winrt::Windows::Web::Http::HttpClient, std::enable_if_t<details::IsHttpClientIsh_v<THttpClient>, int> = 0>
struct Api
{
    THttpClient _client;
    ServerEnvironment _serverEnvironment = ServerEnvironment::Default;

    Api(THttpClient client) : _client(client) {}
    Api() = default;
    ~Api()
    {
        if constexpr (details::HasClose<THttpClient>::value)
        {
            _client.Close();
        }
    }

    auto ServerUri() const
    {
        return std::find_if(ServerConfigList.begin(), ServerConfigList.end(), 
            [e = _serverEnvironment](const auto& config) { return config.environment == e; })->uri;
    }
");
            
            #line 181 "C:\Users\asklar\source\repos\CppWinRTBuilderCodeGen\CppWinRT.OpenApi\CppWinRTGenerator.tt"
 foreach (var path in Paths) { 
var TSecuritySchemaTemplateTypeParam = (path.Security != null && path.Security.Count() > 0) ? $"template<typename TSecuritySchema = {path.DefaultSecurityCppType}>" : string.Empty;

            
            #line default
            #line hidden
            
            #line 184 "C:\Users\asklar\source\repos\CppWinRTBuilderCodeGen\CppWinRT.OpenApi\CppWinRTGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(path.DoxygenComment));
            
            #line default
            #line hidden
            this.Write("\r\n");
            
            #line 185 "C:\Users\asklar\source\repos\CppWinRTBuilderCodeGen\CppWinRT.OpenApi\CppWinRTGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TSecuritySchemaTemplateTypeParam));
            
            #line default
            #line hidden
            this.Write("\r\n");
            
            #line 186 "C:\Users\asklar\source\repos\CppWinRTBuilderCodeGen\CppWinRT.OpenApi\CppWinRTGenerator.tt"
 System.Diagnostics.Debug.WriteLine(path.PathUriTemplate);
            
            #line default
            #line hidden
            this.Write("wil::com_task<");
            
            #line 187 "C:\Users\asklar\source\repos\CppWinRTBuilderCodeGen\CppWinRT.OpenApi\CppWinRTGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(path.ResponseType.CppWinRTFullName));
            
            #line default
            #line hidden
            this.Write("> ");
            
            #line 187 "C:\Users\asklar\source\repos\CppWinRTBuilderCodeGen\CppWinRT.OpenApi\CppWinRTGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetPathCppName(path)));
            
            #line default
            #line hidden
            this.Write("(");
            
            #line 187 "C:\Users\asklar\source\repos\CppWinRTBuilderCodeGen\CppWinRT.OpenApi\CppWinRTGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetCppWinRTParameters(path)));
            
            #line default
            #line hidden
            this.Write(")\r\n{\r\n    const auto serverUri = ServerUri();\r\n    auto path = std::format(");
            
            #line 190 "C:\Users\asklar\source\repos\CppWinRTBuilderCodeGen\CppWinRT.OpenApi\CppWinRTGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ConstructPath(path)));
            
            #line default
            #line hidden
            this.Write(");\r\n    winrt::Windows::Data::Json::JsonObject jsonBody;\r\n");
            
            #line 192 "C:\Users\asklar\source\repos\CppWinRTBuilderCodeGen\CppWinRT.OpenApi\CppWinRTGenerator.tt"
 if (path.RequestBody != null) { 
            
            #line default
            #line hidden
            
            #line 193 "C:\Users\asklar\source\repos\CppWinRTBuilderCodeGen\CppWinRT.OpenApi\CppWinRTGenerator.tt"
   foreach (var property in path.RequestBody.Properties) { 
            
            #line default
            #line hidden
            this.Write("    auto jsonValue_");
            
            #line 194 "C:\Users\asklar\source\repos\CppWinRTBuilderCodeGen\CppWinRT.OpenApi\CppWinRTGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(property.Name));
            
            #line default
            #line hidden
            this.Write(" = ");
            
            #line 194 "C:\Users\asklar\source\repos\CppWinRTBuilderCodeGen\CppWinRT.OpenApi\CppWinRTGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(CreateValueMethodName(property.Schema)));
            
            #line default
            #line hidden
            this.Write("(");
            
            #line 194 "C:\Users\asklar\source\repos\CppWinRTBuilderCodeGen\CppWinRT.OpenApi\CppWinRTGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(property.Name));
            
            #line default
            #line hidden
            this.Write(");\r\n    jsonBody.Insert(L\"");
            
            #line 195 "C:\Users\asklar\source\repos\CppWinRTBuilderCodeGen\CppWinRT.OpenApi\CppWinRTGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(property.Name));
            
            #line default
            #line hidden
            this.Write("\", jsonValue_");
            
            #line 195 "C:\Users\asklar\source\repos\CppWinRTBuilderCodeGen\CppWinRT.OpenApi\CppWinRTGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(property.Name));
            
            #line default
            #line hidden
            this.Write(");\r\n");
            
            #line 196 "C:\Users\asklar\source\repos\CppWinRTBuilderCodeGen\CppWinRT.OpenApi\CppWinRTGenerator.tt"
   } 
  } 
            
            #line default
            #line hidden
            this.Write("    auto jsonPayload = jsonBody.Stringify();\r\n\r\n    auto request = winrt::Windows" +
                    "::Web::Http::HttpRequestMessage(winrt::Windows::Web::Http::HttpMethod::");
            
            #line 200 "C:\Users\asklar\source\repos\CppWinRTBuilderCodeGen\CppWinRT.OpenApi\CppWinRTGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(path.Method));
            
            #line default
            #line hidden
            this.Write("(), winrt::Windows::Foundation::Uri(path));\r\n    request.Content(winrt::Windows::" +
                    "Web::Http::HttpStringContent(jsonPayload, winrt::Windows::Storage::Streams::Unic" +
                    "odeEncoding::Utf8, L\"application/json\"));\r\n");
            
            #line 202 "C:\Users\asklar\source\repos\CppWinRTBuilderCodeGen\CppWinRT.OpenApi\CppWinRTGenerator.tt"
 if (path.Security != null && path.Security.Count() > 0) { 
            
            #line default
            #line hidden
            this.Write("    _security.apply(request, _client);\r\n");
            
            #line 204 "C:\Users\asklar\source\repos\CppWinRTBuilderCodeGen\CppWinRT.OpenApi\CppWinRTGenerator.tt"
 } 
            
            #line default
            #line hidden
            this.Write(@"    auto response = co_await _client.SendRequestAsync(request);
    auto responseContent = co_await response.Content().ReadAsStringAsync();
    if (!response.IsSuccessStatusCode())
    {
        const auto errorJson = winrt::Windows::Data::Json::JsonObject::Parse(responseContent);
        const auto statusCode = static_cast<int32_t>(response.StatusCode());
        const auto hresult = MAKE_HRESULT(SEVERITY_ERROR, FACILITY_HTTP, statusCode);
        throw winrt::hresult_error(hresult, errorJson.GetNamedString(L""message""));
    }

");
            
            #line 215 "C:\Users\asklar\source\repos\CppWinRTBuilderCodeGen\CppWinRT.OpenApi\CppWinRTGenerator.tt"
 if (path.ResponseType.IsArray) { 
            
            #line default
            #line hidden
            this.Write("    winrt::Windows::Data::Json::JsonArray responseJson;\r\n    if (winrt::Windows::" +
                    "Data::Json::JsonArray::TryParse(responseContent, responseJson))\r\n    {\r\n");
            
            #line 219 "C:\Users\asklar\source\repos\CppWinRTBuilderCodeGen\CppWinRT.OpenApi\CppWinRTGenerator.tt"
 } else { 
            
            #line default
            #line hidden
            this.Write("    winrt::Windows::Data::Json::JsonObject responseJson;\r\n    if (winrt::Windows:" +
                    ":Data::Json::JsonObject::TryParse(responseContent, responseJson))\r\n    {\r\n");
            
            #line 223 "C:\Users\asklar\source\repos\CppWinRTBuilderCodeGen\CppWinRT.OpenApi\CppWinRTGenerator.tt"
 } 
      if (path.ResponseType.JsonName == "null") { 
            
            #line default
            #line hidden
            this.Write("        co_return responseJson;\r\n");
            
            #line 226 "C:\Users\asklar\source\repos\CppWinRTBuilderCodeGen\CppWinRT.OpenApi\CppWinRTGenerator.tt"
 } else { 
            
            #line default
            #line hidden
            this.Write("        // parse the json as ");
            
            #line 227 "C:\Users\asklar\source\repos\CppWinRTBuilderCodeGen\CppWinRT.OpenApi\CppWinRTGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(path.ResponseType.CppWinRTName));
            
            #line default
            #line hidden
            this.Write("\r\n        co_return ");
            
            #line 228 "C:\Users\asklar\source\repos\CppWinRTBuilderCodeGen\CppWinRT.OpenApi\CppWinRTGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(path.ResponseType.CppWinRTFullName));
            
            #line default
            #line hidden
            this.Write("{responseJson};\r\n");
            
            #line 229 "C:\Users\asklar\source\repos\CppWinRTBuilderCodeGen\CppWinRT.OpenApi\CppWinRTGenerator.tt"
 } 
            
            #line default
            #line hidden
            this.Write("    }\r\n    else\r\n    {\r\n");
            
            #line 233 "C:\Users\asklar\source\repos\CppWinRTBuilderCodeGen\CppWinRT.OpenApi\CppWinRTGenerator.tt"
 if (path.ResponseType.JsonName == "null") { 
            
            #line default
            #line hidden
            this.Write("        responseJson.Insert(L\"result\", winrt::Windows::Data::Json::JsonValue::Cre" +
                    "ateStringValue(responseContent));\r\n        co_return responseJson;\r\n");
            
            #line 236 "C:\Users\asklar\source\repos\CppWinRTBuilderCodeGen\CppWinRT.OpenApi\CppWinRTGenerator.tt"
 } else { 
            
            #line default
            #line hidden
            this.Write("        throw winrt::hresult_error(E_FAIL, L\"Failed to parse response as JSON\");\r" +
                    "\n");
            
            #line 238 "C:\Users\asklar\source\repos\CppWinRTBuilderCodeGen\CppWinRT.OpenApi\CppWinRTGenerator.tt"
 } 
            
            #line default
            #line hidden
            this.Write("    }\r\n}\r\n");
            
            #line 241 "C:\Users\asklar\source\repos\CppWinRTBuilderCodeGen\CppWinRT.OpenApi\CppWinRTGenerator.tt"
 } 
            
            #line default
            #line hidden
            this.Write(@"};

template<typename TFunctor>
struct FunctorHttpClient
{
    TFunctor _functor;
    FunctorHttpClient(TFunctor&& functor) : _functor(std::move(functor)) {}
    wil::com_task<winrt::Windows::Web::Http::HttpResponseMessage> SendRequestAsync(winrt::Windows::Web::Http::HttpRequestMessage request)
    {
        auto response_from_json = [](std::wstring_view jsonStr)
            {
                auto response = winrt::Windows::Web::Http::HttpResponseMessage(winrt::Windows::Web::Http::HttpStatusCode::Ok);
                response.Content(winrt::Windows::Web::Http::HttpStringContent(jsonStr, winrt::Windows::Storage::Streams::UnicodeEncoding::Utf8, L""application/json""));
                return response;
            };
        if constexpr (std::is_invocable_v<TFunctor, winrt::Windows::Web::Http::HttpRequestMessage>)
        {
            co_return response_from_json(_functor(request).Stringify());
        }
        else if constexpr (std::is_invocable_v<TFunctor>)
        {
            co_return response_from_json(_functor().Stringify());
        }
        else
        {
            static_assert(std::_Always_false<TFunctor>, ""FunctorHttpClient must be constructed with a functor that takes either no arguments or an HttpRequestMessage"");
        }
    }
    void Close() noexcept {}
};
}");
            return this.GenerationEnvironment.ToString();
        }
    }
    
    #line default
    #line hidden
    #region Base class
    /// <summary>
    /// Base class for this transformation
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "17.0.0.0")]
    public class CppWinRTGeneratorBase
    {
        #region Fields
        private global::System.Text.StringBuilder generationEnvironmentField;
        private global::System.CodeDom.Compiler.CompilerErrorCollection errorsField;
        private global::System.Collections.Generic.List<int> indentLengthsField;
        private string currentIndentField = "";
        private bool endsWithNewline;
        private global::System.Collections.Generic.IDictionary<string, object> sessionField;
        #endregion
        #region Properties
        /// <summary>
        /// The string builder that generation-time code is using to assemble generated output
        /// </summary>
        public System.Text.StringBuilder GenerationEnvironment
        {
            get
            {
                if ((this.generationEnvironmentField == null))
                {
                    this.generationEnvironmentField = new global::System.Text.StringBuilder();
                }
                return this.generationEnvironmentField;
            }
            set
            {
                this.generationEnvironmentField = value;
            }
        }
        /// <summary>
        /// The error collection for the generation process
        /// </summary>
        public System.CodeDom.Compiler.CompilerErrorCollection Errors
        {
            get
            {
                if ((this.errorsField == null))
                {
                    this.errorsField = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errorsField;
            }
        }
        /// <summary>
        /// A list of the lengths of each indent that was added with PushIndent
        /// </summary>
        private System.Collections.Generic.List<int> indentLengths
        {
            get
            {
                if ((this.indentLengthsField == null))
                {
                    this.indentLengthsField = new global::System.Collections.Generic.List<int>();
                }
                return this.indentLengthsField;
            }
        }
        /// <summary>
        /// Gets the current indent we use when adding lines to the output
        /// </summary>
        public string CurrentIndent
        {
            get
            {
                return this.currentIndentField;
            }
        }
        /// <summary>
        /// Current transformation session
        /// </summary>
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session
        {
            get
            {
                return this.sessionField;
            }
            set
            {
                this.sessionField = value;
            }
        }
        #endregion
        #region Transform-time helpers
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void Write(string textToAppend)
        {
            if (string.IsNullOrEmpty(textToAppend))
            {
                return;
            }
            // If we're starting off, or if the previous text ended with a newline,
            // we have to append the current indent first.
            if (((this.GenerationEnvironment.Length == 0) 
                        || this.endsWithNewline))
            {
                this.GenerationEnvironment.Append(this.currentIndentField);
                this.endsWithNewline = false;
            }
            // Check if the current text ends with a newline
            if (textToAppend.EndsWith(global::System.Environment.NewLine, global::System.StringComparison.CurrentCulture))
            {
                this.endsWithNewline = true;
            }
            // This is an optimization. If the current indent is "", then we don't have to do any
            // of the more complex stuff further down.
            if ((this.currentIndentField.Length == 0))
            {
                this.GenerationEnvironment.Append(textToAppend);
                return;
            }
            // Everywhere there is a newline in the text, add an indent after it
            textToAppend = textToAppend.Replace(global::System.Environment.NewLine, (global::System.Environment.NewLine + this.currentIndentField));
            // If the text ends with a newline, then we should strip off the indent added at the very end
            // because the appropriate indent will be added when the next time Write() is called
            if (this.endsWithNewline)
            {
                this.GenerationEnvironment.Append(textToAppend, 0, (textToAppend.Length - this.currentIndentField.Length));
            }
            else
            {
                this.GenerationEnvironment.Append(textToAppend);
            }
        }
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void WriteLine(string textToAppend)
        {
            this.Write(textToAppend);
            this.GenerationEnvironment.AppendLine();
            this.endsWithNewline = true;
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void Write(string format, params object[] args)
        {
            this.Write(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void WriteLine(string format, params object[] args)
        {
            this.WriteLine(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Raise an error
        /// </summary>
        public void Error(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Raise a warning
        /// </summary>
        public void Warning(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            error.IsWarning = true;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Increase the indent
        /// </summary>
        public void PushIndent(string indent)
        {
            if ((indent == null))
            {
                throw new global::System.ArgumentNullException("indent");
            }
            this.currentIndentField = (this.currentIndentField + indent);
            this.indentLengths.Add(indent.Length);
        }
        /// <summary>
        /// Remove the last indent that was added with PushIndent
        /// </summary>
        public string PopIndent()
        {
            string returnValue = "";
            if ((this.indentLengths.Count > 0))
            {
                int indentLength = this.indentLengths[(this.indentLengths.Count - 1)];
                this.indentLengths.RemoveAt((this.indentLengths.Count - 1));
                if ((indentLength > 0))
                {
                    returnValue = this.currentIndentField.Substring((this.currentIndentField.Length - indentLength));
                    this.currentIndentField = this.currentIndentField.Remove((this.currentIndentField.Length - indentLength));
                }
            }
            return returnValue;
        }
        /// <summary>
        /// Remove any indentation
        /// </summary>
        public void ClearIndent()
        {
            this.indentLengths.Clear();
            this.currentIndentField = "";
        }
        #endregion
        #region ToString Helpers
        /// <summary>
        /// Utility class to produce culture-oriented representation of an object as a string.
        /// </summary>
        public class ToStringInstanceHelper
        {
            private System.IFormatProvider formatProviderField  = global::System.Globalization.CultureInfo.InvariantCulture;
            /// <summary>
            /// Gets or sets format provider to be used by ToStringWithCulture method.
            /// </summary>
            public System.IFormatProvider FormatProvider
            {
                get
                {
                    return this.formatProviderField ;
                }
                set
                {
                    if ((value != null))
                    {
                        this.formatProviderField  = value;
                    }
                }
            }
            /// <summary>
            /// This is called from the compile/run appdomain to convert objects within an expression block to a string
            /// </summary>
            public string ToStringWithCulture(object objectToConvert)
            {
                if ((objectToConvert == null))
                {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                System.Type t = objectToConvert.GetType();
                System.Reflection.MethodInfo method = t.GetMethod("ToString", new System.Type[] {
                            typeof(System.IFormatProvider)});
                if ((method == null))
                {
                    return objectToConvert.ToString();
                }
                else
                {
                    return ((string)(method.Invoke(objectToConvert, new object[] {
                                this.formatProviderField })));
                }
            }
        }
        private ToStringInstanceHelper toStringHelperField = new ToStringInstanceHelper();
        /// <summary>
        /// Helper to produce culture-oriented representation of an object as a string
        /// </summary>
        public ToStringInstanceHelper ToStringHelper
        {
            get
            {
                return this.toStringHelperField;
            }
        }
        #endregion
    }
    #endregion
}
