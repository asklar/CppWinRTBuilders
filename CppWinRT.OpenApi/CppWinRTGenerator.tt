<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
// This file was automatically generated by CppWinRT.OpenApi

#include <winrt/Windows.Data.Json.h>
#include <winrt/Windows.Foundation.h>

<# foreach (var newType in types.Where(x => !x.Value.IsBuiltIn)) { #>
struct <#= newType.Value.CppWinRTName #>
{<# foreach (var property in newType.Value.Members) { #>

  <#= LookupType(property.Schema.JsonName).CppWinRTName #> <#= property.Name #>{};
<# } #>};
<# } #>

<# foreach (var path in Paths) { #>
// <#= path.PathUriTemplate #>
// <#= path.Summary #>
// <#= path.Description #>auto <#= path.Name #>(<#= GetCppWinRTParameters(path) #>)
{
  // implementation
  auto path = std::vformat(<#= ConstructPath(path) #>);
  winrt::Windows::Data::Json::JsonObject jsonBody;
  <# if (path.RequestBody != null) { #>
  <#   foreach (var property in path.RequestBody.Properties) { #>auto jsonValue_<#= property.Name #> = winrt::Windows::Data::Json::JsonValue::<#= CreateValueMethodName(property) #>(<#= property.Name #>);
  jsonBody.Insert(L"<#= property.Name #>", jsonValue_<#= property.Name #>);
  <#   } #>
  <# } #>auto jsonPayload = jsonBody.Stringify();

  auto request = winrt::Windows::Web::Http::HttpRequestMessage(winrt::Windows::Web::Http::HttpMethod::<#= path.Method #>(), winrt::Windows::Foundation::Uri(path));
  request.Content(winrt::Windows::Web::Http::HttpStringContent(jsonPayload, winrt::Windows::Storage::Streams::UnicodeEncoding::Utf8, L"application/json"));
  auto response = co_await client.SendRequestAsync(request);
  auto responseContent = co_await response.Content().ReadAsStringAsync();
  auto responseJson = winrt::Windows::Data::Json::JsonObject::Parse(responseContent);
  // ...
}

<# } #>