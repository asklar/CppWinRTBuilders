<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
// This file was automatically generated by CppWinRT.OpenApi
// from the OpenAPI specification at <#= SpecificationUrl #>
// (<#= OpenApiPath #>)
// Do not edit this file directly, as it will be overwritten.
#include <winrt/Windows.Data.Json.h>
#include <winrt/Windows.Foundation.h>
#include <winrt/Windows.Foundation.Collections.h>
#include <winrt/Windows.Web.Http.h>
#include <wil/coroutine.h>
#include <format>

// <#= Title #>
// Version <#= Version #>

<# foreach (var newType in types.Where(x => !x.Value.IsBuiltIn)) { #>
namespace winrt::OpenApi
{
struct <#= newType.Value.CppWinRTName.ToCamelCase() #>
{
<# foreach (var property in newType.Value.Members) { #>
  <#= LookupType(property.Schema.JsonName).CppWinRTName #> <#= property.Name #>{};
<# } #>
  <#= newType.Value.CppWinRTName.ToCamelCase() #>() = default;
  <#= newType.Value.CppWinRTName.ToCamelCase() #>(const winrt::Windows::Data::Json::JsonObject& json)
  {
<# foreach (var property in newType.Value.Members) { #>
    <#= property.Name #> = json.<#= JsonObjectMethod(property) #>(L"<#= property.Name #>");
<# } #>
  }
  winrt::Windows::Data::Json::IJsonValue ToJsonValue() const
  {
    auto json = winrt::Windows::Data::Json::JsonObject();
<# foreach (var property in newType.Value.Members) { #>
		json.Insert(L"<#= property.Name #>", <#= CreateValueMethodName(property) #>(<#= property.Name #>));
<# } #>
		return json;
  }
};

<# } #>
}

namespace winrt::OpenApi
{
<# foreach (var path in Paths) { #>
<#= path.DoxygenComment #>
template<typename THttpClient>
wil::com_task<winrt::OpenApi::<#= path.ResponseType.CppWinRTName.ToCamelCase() #>> <#= path.GetCppName() #>(<#= GetCppWinRTParameters(path, true) #>)
{
  auto path = std::format(<#= ConstructPath(path) #>);
  winrt::Windows::Data::Json::JsonObject jsonBody;
<# if (path.RequestBody != null) { #>
<#   foreach (var property in path.RequestBody.Properties) { #>
  auto jsonValue_<#= property.Name #> = <#= CreateValueMethodName(property) #>(<#= property.Name #>);
  jsonBody.Insert(L"<#= property.Name #>", jsonValue_<#= property.Name #>);
<#   } 
  } #>
  auto jsonPayload = jsonBody.Stringify();

  auto request = winrt::Windows::Web::Http::HttpRequestMessage(winrt::Windows::Web::Http::HttpMethod::<#= path.Method #>(), winrt::Windows::Foundation::Uri(path));
  request.Content(winrt::Windows::Web::Http::HttpStringContent(jsonPayload, winrt::Windows::Storage::Streams::UnicodeEncoding::Utf8, L"application/json"));
  auto response = co_await _client.SendRequestAsync(request);
  response.EnsureSuccessStatusCode();
  auto responseContent = co_await response.Content().ReadAsStringAsync();
  auto responseJson = winrt::Windows::Data::Json::JsonObject::Parse(responseContent);
  // parse the json as <#= path.ResponseType.CppWinRTName #>
  co_return winrt::OpenApi::<#= path.ResponseType.CppWinRTName.ToCamelCase() #>{responseJson};
}

<#= path.DoxygenComment #>
wil::com_task<winrt::OpenApi::<#= path.ResponseType.CppWinRTName.ToCamelCase() #>> <#= path.GetCppName() #>(<#= GetCppWinRTParameters(path, false) #>)
{
  auto _client = winrt::Windows::Web::Http::HttpClient();
  auto ret = co_await <#= path.GetCppName() #>(<#= path.GetParametersNamesWithHttpClient() #>);
  _client.Close();
  co_return ret;
}

<# } #>
}